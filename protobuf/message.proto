syntax = "proto3";
package horus.pb;
option go_package = "./protobuf";

import "google/protobuf/empty.proto";

message HorusResponse {
    string status = 1;
}

message VCsResponse {
    repeated VCInfo vcs = 1;
}

message VCInfo {
    uint32 id = 1;
    repeated uint32 spines = 2;
    repeated VCServerInfo servers = 3;
}

message VCServerInfo {
    uint32 id = 1;
    repeated uint32 workersIDs = 2;
}

message TopoInfo {
    repeated SpineInfo spines = 1;
}

message SpineInfo {
    uint32 id = 1;
    string address = 2;
    repeated LeafInfo leaves = 3;
    uint32 pipeID = 4;
}

message LeafInfo {
    uint32 id = 1;
    string address = 2;
    repeated ServerInfo servers = 3;
    uint32 spineID = 4;
    string mgmtAddress = 5;
    uint32 pipeID = 6;
}

message ServerInfo {
    uint32 id = 1;
    uint32 port_id = 2;
    string address = 3;
    uint32 workers_count = 4;
    uint32 leafID = 5;
}

service HorusService {
    // Topology-related APIs
    rpc GetTopology(google.protobuf.Empty) returns (TopoInfo) {}
    rpc GetTopologyAtLeaf(LeafInfo) returns (TopoInfo) {}
    rpc AddLeaf(LeafInfo) returns (HorusResponse) {}
    rpc FailLeaf(LeafInfo) returns (HorusResponse) {}
    rpc AddServer(ServerInfo) returns (HorusResponse) {}
    rpc FailServer(ServerInfo) returns (HorusResponse) {}

    // VC-related APIs
    rpc GetVCs(google.protobuf.Empty) returns (VCsResponse) {}
    rpc GetVCsOfLeaf(LeafInfo) returns (VCsResponse) {}
    rpc AddVC(VCInfo) returns (HorusResponse) {}
    rpc RemoveVC(VCInfo) returns (HorusResponse) {}
}

